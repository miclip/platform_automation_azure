resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final

- name: azure-blobstore
  type: docker-image
  source:
    repository: pcfabr/azure-blobstore-resource

resources:
- name: daily
  type: time
  source:
    interval: 24h

- name: one-time-trigger
  type: time
  source:
    interval: 999999h

- name: config
  type: git
  source:
    private_key: {{git_private_key}}
    uri: {{configuration_uri}}
    branch: master

- name: vars
  type: git
  source:
    private_key: {{git_private_key}}
    uri: {{vars_uri}}
    branch: master

- name: healthwatch-product
  type: azure-blobstore
  source:
    storage_account_name: {{azure_storage_account_name}}
    storage_account_key: {{azure_storage_account_key}}
    container: {{azure_pivnet_products_storage_container}}
    versioned_file: p-healthwatch-1.4.4-build.1.pivotal

- name: healthwatch-stemcell
  type: azure-blobstore
  source:
    storage_account_name: {{azure_storage_account_name}}
    storage_account_key: {{azure_storage_account_key}}
    container: {{azure_pivnet_products_storage_container}}
    versioned_file: bosh-stemcell-97.43-azure-hyperv-ubuntu-xenial-go_agent.tgz


- name: installation
  type: azure-blobstore
  source:
   storage_account_name: {{azure_storage_account_name}}
   storage_account_key: {{azure_storage_account_key}}
   container: {{azure_pivnet_products_storage_container}}
   versioned_file: installation.zip

- name: opsman-image
  type: azure-blobstore
  source:
    storage_account_name: opsmanagerwestus
    storage_account_key: none
    container: images
    versioned_file: ops-manager-2.4-build.131.vhd
  
- name: pas-product
  type: azure-blobstore
  source:
    storage_account_name: {{azure_storage_account_name}}
    storage_account_key: {{azure_storage_account_key}}
    container: {{azure_pivnet_products_storage_container}}
    versioned_file: cf-2.4.1-build.1.pivotal

- name: pas-stemcell
  type: azure-blobstore
  source:
    storage_account_name: {{azure_storage_account_name}}
    storage_account_key: {{azure_storage_account_key}}
    container: {{azure_pivnet_products_storage_container}}
    versioned_file: bosh-stemcell-170.15-azure-hyperv-ubuntu-xenial-go_agent.tgz

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: platform-automation
    product_version: 1\.(.*) # pin to major version 1
    sort_by: semver

- name: platform-automation-tasks-azure
  type: azure-blobstore
  source:
    storage_account_name: {{azure_storage_account_name}}
    storage_account_key: {{azure_storage_account_key}}
    container: {{azure_pcfauto_storage_container}}
    versioned_file: {{platform_automation_tasks_zip}}

- name: platform-automation-image-azure
  type: azure-blobstore
  source:
    storage_account_name: {{azure_storage_account_name}}
    storage_account_key: {{azure_storage_account_key}}
    container: {{azure_pcfauto_storage_container}}
    versioned_file: {{platform_automation_image_tarball}}

jobs:
- name: fetch-healthwatch
  plan: 
  - aggregate:
    - do:     
      - get: daily
        trigger: true   
      - get: config 
      - get: vars
      - get: platform-automation-tasks-azure
        passed: [fetch-platform-automation]
      - file: config/tasks/unzip-platform-automation-tasks/task.yml
        task: unpack-zip
      - get: platform-automation-image-azure
        passed: [fetch-platform-automation]
      - file: config/tasks/tar-platform-automation-image/task.yml
        task: unpack-tarball
    
  - task: download-healthwatch-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/healthwatch.yml
      VARS_FILES: vars/vars.yml
    output_mapping: {downloaded-stemcell: healthwatch-stemcell}
  - aggregate:
    - put: healthwatch-product
      params:
        file: downloaded-product/p-healthwatch-1.4.4-build.1.pivotal
    - put: healthwatch-stemcell
      params:
        file: healthwatch-stemcell/bosh-stemcell-97.43-azure-hyperv-ubuntu-xenial-go_agent.tgz

- name: fetch-pas
  plan:  
  - aggregate:
    - do:      
      - get: daily
        trigger: true
      - get: config
      - get: vars
      - get: platform-automation-tasks-azure
        passed: [fetch-platform-automation]
      - file: config/tasks/unzip-platform-automation-tasks/task.yml
        task: unpack-zip
      - get: platform-automation-image-azure
        passed: [fetch-platform-automation]
      - file: config/tasks/tar-platform-automation-image/task.yml
        task: unpack-tarball
  - task: download-pas-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/pas.yml
      VARS_FILES: vars/vars.yml
    output_mapping: {downloaded-stemcell: pas-stemcell}
  - aggregate:
    - put: pas-product
      params:
        file: downloaded-product/cf-2.4.1-build.1.pivotal
    - put: pas-stemcell
      params:
        file: pas-stemcell/bosh-stemcell-170.15-azure-hyperv-ubuntu-xenial-go_agent.tgz

- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks-azure
      params:
        file: platform-automation-pivnet/platform-automation-tasks-1.0.1-beta.1.zip
    - put: platform-automation-image-azure
      params:
        file: platform-automation-pivnet/platform-automation-image-1.0.1-beta.1.tgz

- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: platform-automation-image-azure
    - file: config/tasks/tar-platform-automation-image/task.yml
      task: unpack-tarball
    - get: one-time-trigger
      trigger: true  
    - get: platform-automation-tasks-azure
    - file: config/tasks/unzip-platform-automation-tasks/task.yml
      task: unpack-zip    
    - get: opsman-image
    - get: config
    - get: vars
  - task: create-vm
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      state: config
    params:
      VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
      STATE_FILE: ((foundation))/state/state.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
    ensure: &make-state-commit
      do:
        - task: make-commit
          image: pcf-automation-image
          file: pcf-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: config
            file-source: generated-state
          output_mapping:
            repository-commit: config-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@miclip.io"
            GIT_AUTHOR_NAME: "PCF Automation Bot"
            COMMIT_MESSAGE: 'Update state file'
        - put: config
          params:
            repository: config-commit
            merge: true
  - task: configure-authentication
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: config
      config: config
    params:
      ENV_FILE: ((foundation))/env/env.yml
      AUTH_CONFIG_FILE: ((foundation))/config/auth.yml
  - task: configure-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: config
      env: config
      vars: vars
    params:
      VARS_FILES: vars/((foundation))/vars/director-vars.yml
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: ((foundation))/config/director.yml
  - task: apply-director-changes
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: config
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: staged-director-config
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-tasks-azure
      passed: [fetch-platform-automation]
    - file: config/tasks/unzip-platform-automation-tasks/task.yml
      task: unpack-zip
    - get: platform-automation-image-azure
      passed: [fetch-platform-automation]
    - file: config/tasks/tar-platform-automation-image/task.yml
      task: unpack-tarball
    - get: config
  - task: staged-director-config
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/staged-director-config.yml
    input_mapping:
      env: config
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: export-installation
  serial: true
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-tasks-azure
      passed: [fetch-platform-automation]
    - file: config/tasks/unzip-platform-automation-tasks/task.yml
      task: unpack-zip
    - get: platform-automation-image-azure
      passed: [fetch-platform-automation]
    - file: config/tasks/tar-platform-automation-image/task.yml
      task: unpack-tarball
    - get: config
    - get: vars
  - task: export-installation
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: config
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - put: installation
    params:
      file: installation/installation.zip

- name: upgrade-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: one-time-trigger
      passed: [ install-opsman ]
    - get: platform-automation-tasks-azure
      passed: [fetch-platform-automation]
    - file: config/tasks/unzip-platform-automation-tasks/task.yml
      task: unpack-zip
    - get: platform-automation-image-azure
      passed: [fetch-platform-automation]
    - file: config/tasks/tar-platform-automation-image/task.yml
      task: unpack-tarball
    - get: opsman-image
    - get: installation
      passed: [ export-installation ]
    - get: config
    - get: vars
  - task: upgrade-opsman
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      image: opsman-image
      state: config
      config: config
      env: config
      vars: vars
    params:
      VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
      ENV_FILE: ((foundation))/env/env.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
      STATE_FILE: ((foundation))/state/state.yml
    ensure: *make-state-commit
  - task: apply-director-changes
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: config
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: upload-and-stage-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image-azure
      passed: [upgrade-opsman]
      trigger: true
    - file: config/tasks/tar-platform-automation-image/task.yml
      task: unpack-tarball
    - get: platform-automation-tasks-azure    
    - file: config/tasks/unzip-platform-automation-tasks/task.yml
      task: unpack-zip  
    - get: pas-product
    - get: config
    - get: vars
  - task: upload-product
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas-product
      env: config
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pas-product
      env: config
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: configure-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image-azure
      passed:
      - upload-and-stage-pas
      trigger: true
    - file: config/tasks/tar-platform-automation-image/task.yml
      task: unpack-tarball
    - get: platform-automation-tasks-azure
    - file: config/tasks/unzip-platform-automation-tasks/task.yml
      task: unpack-zip    
    - get: config
    - get: vars
  - task: configure-pas
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: config
      vars: vars
    params:
      CONFIG_FILE: ((foundation))/config/cf.yml
      VARS_FILES: vars/((foundation))/vars/cf-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: upload-stemcell
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image-azure
      passed:
      - upgrade-opsman
      trigger: true
    - file: config/tasks/tar-platform-automation-image/task.yml
      task: unpack-tarball  
    - get: platform-automation-tasks-azure
    - file: config/tasks/unzip-platform-automation-tasks/task.yml
      task: unpack-zip    
    - get: pas-stemcell
      trigger: true
    - get: healthwatch-stemcell
      trigger: true
    - get: config
    - get: vars
  - task: upload-pas-stemcell
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: config
      stemcell: pas-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-healthwatch-stemcell
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: config
      stemcell: healthwatch-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: upload-and-stage-healthwatch
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image-azure
      passed:
      - upload-stemcell
      trigger: true
    - file: config/tasks/tar-platform-automation-image/task.yml
      task: unpack-tarball  
    - get: platform-automation-tasks-azure
    - file: config/tasks/unzip-platform-automation-tasks/task.yml
      task: unpack-zip    
    - get: healthwatch-product
    - get: config
    - get: vars
  - task: upload-and-stage-product
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: healthwatch-product
      env: config
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: configure-healthwatch
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image-azure
      passed:
      - upload-and-stage-healthwatch
      trigger: true
    - file: config/tasks/tar-platform-automation-image/task.yml
      task: unpack-tarball  
    - get: platform-automation-tasks-azure
    - file: config/tasks/unzip-platform-automation-tasks/task.yml
      task: unpack-zip
    - get: config
    - get: vars
  - task: configure-healthwatch
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: config
      vars: vars
    params:
      CONFIG_FILE: ((foundation))/config/healthwatch.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: apply-product-changes
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image-azure
      passed:
      - configure-healthwatch
      - configure-pas
      trigger: true
    - file: config/tasks/tar-platform-automation-image/task.yml
      task: unpack-tarball  
    - get: platform-automation-tasks-azure
    - file: config/tasks/unzip-platform-automation-tasks/task.yml
      task: unpack-zip
    - get: config
    - get: vars
  - task: apply-product-changes
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: config
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: staged-pas-config
  plan:
  - aggregate:
    - get: platform-automation-image-azure
    - file: config/tasks/tar-platform-automation-image/task.yml
      task: unpack-tarball  
    - get: platform-automation-tasks-azure
    - file: config/tasks/unzip-platform-automation-tasks/task.yml
      task: unpack-zip
    - get: config
    - get: vars
  - task: staged-config
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: config
    params:
      PRODUCT_NAME: cf
      ENV_FILE: ((foundation))/env/env.yml

- name: staged-healthwatch-config
  plan:
  - aggregate:
    - get: platform-automation-image-azure
    - file: config/tasks/tar-platform-automation-image/task.yml
      task: unpack-tarball  
    - get: platform-automation-tasks-azure
    - file: config/tasks/unzip-platform-automation-tasks/task.yml
      task: unpack-zip
    - get: config
    - get: vars
  - task: staged-config
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: config
    params:
      PRODUCT_NAME: p-healthwatch
      ENV_FILE: ((foundation))/env/env.yml